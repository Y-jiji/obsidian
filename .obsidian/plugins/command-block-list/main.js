/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CommandBlockListPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/monkey-around/dist/index.mjs
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const inherited = obj[method], hadOwn = obj.hasOwnProperty(method), original = hadOwn ? inherited : function() {
    return Object.getPrototypeOf(obj)[method].apply(this, arguments);
  };
  let current = createWrapper(original);
  if (inherited)
    Object.setPrototypeOf(current, inherited);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, inherited || Function);
  }
}

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  blockList: []
};
var CommandSuggest = class extends import_obsidian.AbstractInputSuggest {
  constructor(tab, inputEl) {
    super(tab.plugin.app, inputEl);
    this.next = [];
    this.inputEl = inputEl;
    this.plugin = tab.plugin;
    this.tab = tab;
  }
  getSuggestions(query) {
    const search = (0, import_obsidian.prepareFuzzySearch)(query);
    const commands = Object.values(this.plugin.app.commands.commands).filter((command) => !this.plugin.settings.blockList.includes(command.id));
    const results = [];
    for (const command of commands) {
      const match = search(command.name);
      if (match)
        results.push({ match, command });
    }
    (0, import_obsidian.sortSearchResults)(results);
    return results.map(({ command }) => command);
  }
  renderSuggestion(command, el) {
    el.setText(command.name);
  }
  selectSuggestion(command) {
    this.inputEl.blur();
    this.inputEl.value = command.name;
    this.close();
    this.next.forEach((callback) => callback(command));
  }
  then(callback) {
    this.next.push(callback);
    return this;
  }
};
var CommandBlockListSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  get settings() {
    return this.plugin.settings;
  }
  addSetting() {
    return new import_obsidian.Setting(this.containerEl);
  }
  addHeading(heading, icon) {
    return this.addSetting().setName(heading).setHeading().then((setting) => {
      if (icon) {
        const iconEl = createDiv();
        setting.settingEl.prepend(iconEl);
        (0, import_obsidian.setIcon)(iconEl, icon);
      }
    });
  }
  redisplay() {
    const scrollTop = this.containerEl.scrollTop;
    this.display();
    this.containerEl.scroll({ top: scrollTop });
  }
  display() {
    this.containerEl.empty();
    this.addSetting().setDesc("List the commands you want to block. These commands will not be shown in the command palette.").addExtraButton((button) => {
      button.setIcon("plus").setTooltip("Add command to block list").onClick(() => {
        this.settings.blockList.push("");
        this.redisplay();
      });
    });
    for (let i = 0; i < this.settings.blockList.length; i++) {
      const id = this.settings.blockList[i];
      const command = this.app.commands.findCommand(id);
      this.addSetting().addText((text) => {
        if (command)
          text.setValue(command.name);
        text.inputEl.size = 40;
        new CommandSuggest(this, text.inputEl).then((cmd) => {
          this.settings.blockList[i] = cmd.id;
          this.redisplay();
        });
      }).addExtraButton((button) => {
        button.setIcon("trash").setTooltip("Remove command from block list").onClick(() => {
          this.settings.blockList.splice(i, 1);
          this.redisplay();
        });
      });
    }
  }
  hide() {
    this.settings.blockList = this.settings.blockList.filter((id) => {
      const command = this.app.commands.findCommand(id);
      return command !== void 0;
    }).sort((a, b) => {
      const cmdA = this.app.commands.findCommand(a);
      const cmdB = this.app.commands.findCommand(b);
      return cmdA.name.localeCompare(cmdB.name);
    });
    this.plugin.saveSettings();
  }
};

// src/main.ts
var CommandBlockListPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    await this.saveSettings();
    this.addSettingTab(new CommandBlockListSettingTab(this));
    const blockList = this.settings.blockList;
    this.register(around(this.app.commands.constructor.prototype, {
      listCommands(old) {
        return function(...args) {
          const commands = old.call(this, ...args);
          return commands.filter((command) => !blockList.includes(command.id));
        };
      }
    }));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

/* nosourcemap */