{
  "settings_version": "0.23.0",
  "debug": false,
  "obsidian_command_palette_prefix": "Execute: ",
  "preview_variables_in_command_palette": true,
  "show_autocomplete_menu": true,
  "working_directory": "",
  "default_shells": {},
  "environment_variable_path_augmentations": {},
  "show_installation_warnings": true,
  "error_message_duration": 20,
  "notification_message_duration": 10,
  "execution_notification_mode": "disabled",
  "output_channel_clipboard_also_outputs_to_notification": true,
  "output_channel_notification_decorates_output": true,
  "enable_events": true,
  "approve_modals_by_pressing_enter_key": true,
  "command_palette": {
    "re_execute_last_shell_command": {
      "enabled": true,
      "prefix": "Re-execute: "
    }
  },
  "max_visible_lines_in_shell_command_fields": false,
  "shell_commands": [
    {
      "id": "dxchzs6nrs",
      "platform_specific_commands": {
        "default": "# ------------------------- #\n# Markdown via Typst to PDF #\n# ------------------------- #\n\n# Prepare File Names\nFILE=$(echo '{{file_path:relative}}' | sed 's/\\\\//g')\nNAME=$(echo '{{file_name}}' | sed 's/\\\\//g' | sed 's/.md$//g')\nNAME_ESCAPED=$(echo ${NAME} | sed 's/@/\\\\@/g')\nBIB=\"2-Area/bibliography.bib\"\n\n# Convert Document to Typst via Pandoc\nDOC=$(cat \"${FILE}\" | \\\n    tr '\\n' '\\r' | \\\n    sed 's/\\r/    \\r/g' | \\\n    tr '\\r' '\\n' | \\\n    pandoc \\\n    --from=markdown+wikilinks_title_after_pipe \\\n    --to=typst \\\n    --lua-filter=.obsidian/scripts/academic.lua \\\n    --wrap=none\n)\n\n# Add Typst Header\nDOC=\"\n#set page(paper: \\\"a4\\\")\n#let foreground = black\n#show bibliography: set heading(numbering: \\\"1  \\\")\n#set heading(numbering: \\\"1.1.1  \\\")\n#show heading: it => [\n    #v(0.5em)\n    #it\n    #v(0.5em)\n]\n#align(center)[#rect(width: 80%, inset: 20pt)[#align(center)[\n    #set text(size: 16pt)\n    #strong[${NAME_ESCAPED}]\n]]]\n#align(center)[\n   #set text(size: 10pt)\n    #emph[Tianji Yang]\n]\n#let varnothing = \\$text(font: \\\"Fira Sans\\\", nothing)\\$\n#show figure.caption.where(body: []): it => it.supplement + [ ] + context it.counter.display()\n\n${DOC}\n\n#bibliography(\\\"${BIB}\\\", style: \\\"ieee\\\")\n\"\n# Pipe Content to Typst Compiler\necho \"${DOC}\" | typst compile - \"${NAME}.pdf\"\necho \"${DOC}\" > debug.typ\necho \"Finish Exporting \\\"${NAME}.pdf\\\"\" 1>&2"
      },
      "shells": {},
      "alias": "Export PDF via Typst",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "ismnvtihlh",
      "platform_specific_commands": {
        "default": "IFS=$'\\n'\nfor x in $(find \"$(pwd)\" | grep -P \"(.pdf|.zip)$\")\ndo\n    echo \"remove $x\" 1>&2\n    rm -rf \"$x\"\ndone"
      },
      "shells": {},
      "alias": "Purge Non-MD Files",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "lkps9dkg27",
      "platform_specific_commands": {
        "default": "zip -r $(echo \"obsidian-{{date:YYYY-MM-DD}}.zip\" | sed 's/\\\\//g') \"$(pwd)\" 1>&2"
      },
      "shells": {},
      "alias": "Zip Current Vault",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "2uxtb6r4bt",
      "platform_specific_commands": {
        "default": "gnome-text-editor 2-Area/bibliography.bib"
      },
      "shells": {},
      "alias": "Open Citation File",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "79fhgcasah",
      "platform_specific_commands": {
        "default": "code ."
      },
      "shells": {},
      "alias": "Open in VSCode",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "5wh1mbxajn",
      "platform_specific_commands": {
        "default": "\n# ---------------------------- #\n# Markdown via Typst to Slides #\n# ---------------------------- #\n\n# Prepare File Names\nFILE=$(echo '{{file_path:relative}}' | sed 's/\\\\//g')\nNAME=$(echo '{{file_name}}' | sed 's/\\\\//g' | sed 's/.md$//g')\nNAME_ESCAPED=$(echo ${NAME} | sed 's/@/\\\\@/g')\nBIB=\"2-Area/bibliography.bib\"\n\n# Convert Document to Typst via Pandoc\nDOC=$(cat \"${FILE}\" | \\\n    tr '\\n' '\\r' | \\\n    sed 's/\\r/    \\r/g' | \\\n    tr '\\r' '\\n' | \\\n    pandoc \\\n    --from=markdown+wikilinks_title_after_pipe \\\n    --to=typst \\\n    --lua-filter=.obsidian/scripts/academic.lua \\\n    --wrap=none\n)\n\n# Add Typst Header\nDOC=\"\n// First Page\n#set page(paper: \\\"presentation-16-9\\\")\n#align(center + horizon)[#block(width: 80%, inset: 20pt)[#align(center)[\n    #set text(size: 40pt)\n    #line(length: 100%)\n    #strong[${NAME_ESCAPED}]\n    #line(length: 100%)\n]]]\n#align(center)[\n   #set text(size: 20pt)\n   #emph[Tianji Yang (tyang425\\@gatech.edu)]\n   #linebreak()\n   #emph[Georgia Institute of Technology]\n]\n\n// Setup text size\n#set text(size: 20pt)\n\n// Disable Normal Level 1 Heading\n#show heading: it => [\n    #v(0.1em)\n    #it\n    #v(0.1em)\n]\n#show heading.where(level: 1): h => pagebreak()\n\n#let varnothing = \\$text(font: \\\"Fira Sans\\\", nothing)\\$\n\n// Allow Breaking Long Codeblocks\n#show figure.caption.where(body: []): it => it.supplement + [ ] + context it.counter.display()\n#show figure: set block(breakable: true)\n\n// Setup page size & Level 1 Heading\n#set page(\n  margin: (\n    top: 1.8em + 4em,\n    bottom: 4em,\n    left: 4em,\n    right: 4em\n  ),\n  header: [\n      #context {  \n        let p = here().page()\n        let h = query(selector(heading.where(level: 1)))\n          .rev().find(x => x.location().page() <= p)\n        if h != none {\n            strong[#text(size: 1.8em)[#h.body]]\n            v(0.5em)\n        }\n    }\n  ]\n)\n\n${DOC}\n\n#bibliography(\\\"${BIB}\\\", style: \\\"ieee\\\")\n\"\n\n# Pipe Content to Typst Compiler\necho \"${DOC}\" | typst compile - \"${NAME} (Slides).pdf\"\necho \"${DOC}\" > debug.typ\necho \"Finish Exporting \\\"${NAME} (Slides).pdf\\\"\" 1>&2\nevince --presentation \"${NAME} (Slides).pdf\""
      },
      "shells": {},
      "alias": "Export Slides via Typst",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "sfthjvrttk",
      "platform_specific_commands": {
        "default": "echo {{selection}} | \\\npandoc -f markdown+wikilinks_title_after_pipe -t plain | \\\npiper-tts --model /usr/share/piper-voices/de/de_DE/thorsten/medium/de_DE-thorsten-medium.onnx --output-raw --quiet | \\\naplay -D pipewire -r 22050 -f S16_LE -t raw - >& /dev/null"
      },
      "shells": {},
      "alias": "Read Deutsch",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "ignore",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "t48dezcphk",
      "platform_specific_commands": {
        "default": "X={{selection}}\nY=$(trans \"$X\" --from=de -b)\necho \"**\\<DE\\>** ${X}\n**\\<EN\\>** ${Y}\""
      },
      "shells": {},
      "alias": "Translate Deustch",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "current-file-caret",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [
        {
          "type": "prompt",
          "enabled": false,
          "prompt_id": ""
        }
      ],
      "variable_default_values": {}
    },
    {
      "id": "vrqgsuvbht",
      "platform_specific_commands": {
        "default": "git add .\nM=$(echo {{_GIT_MESSAGE}})\ngit commit -m \"${M}\"\ngit pull\ngit push"
      },
      "shells": {},
      "alias": "Git Synchronize",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_handlers": {
        "stdout": {
          "handler": "notification",
          "convert_ansi_code": true
        },
        "stderr": {
          "handler": "notification",
          "convert_ansi_code": true
        }
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "execution_notification_mode": null,
      "events": {},
      "debounce": null,
      "command_palette_availability": "enabled",
      "preactions": [
        {
          "type": "prompt",
          "enabled": true,
          "prompt_id": "x838no1bq0"
        }
      ],
      "variable_default_values": {}
    }
  ],
  "prompts": [
    {
      "id": "x838no1bq0",
      "title": "Git Commit Message",
      "description": "",
      "preview_shell_command": false,
      "fields": [
        {
          "type": "single-line-text",
          "label": "COMMIT",
          "description": "Git Commit Message",
          "default_value": "Synchronize: {{date:YYYY-MM-DD}}",
          "target_variable_id": "ct2hk9nkl3",
          "required": true
        }
      ],
      "execute_button_text": "Execute"
    }
  ],
  "builtin_variables": {},
  "custom_variables": [
    {
      "id": "ct2hk9nkl3",
      "name": "GIT_MESSAGE",
      "description": "Git Commit Message",
      "default_value": null
    }
  ],
  "custom_variables_notify_changes_via": {
    "obsidian_uri": true,
    "output_assignment": true
  },
  "custom_shells": [],
  "output_wrappers": []
}